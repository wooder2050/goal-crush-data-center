generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Team {
  team_id                  Int                       @id @default(autoincrement())
  team_name                String                    @unique @db.VarChar(100)
  founded_year             Int?
  description              String?
  created_at               DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                 @default(now()) @db.Timestamptz(6)
  primary_color            String?                   @default("#000000") @db.VarChar(7)
  secondary_color          String?                   @default("#FFFFFF") @db.VarChar(7)
  logo                     String?                   @db.VarChar(500)
  community_posts          CommunityPost[]
  group_league_standings   GroupLeagueStanding[]
  match_coaches            MatchCoach[]
  match_supports           MatchSupport[]
  matches_away             Match[]                   @relation("AwayTeam")
  matches_home             Match[]                   @relation("HomeTeam")
  penalty_shootout_details PenaltyShootoutDetail[]
  player_match_stats       PlayerMatchStats[]
  player_season_stats      PlayerSeasonStats[]
  player_team_history      PlayerTeamHistory[]
  standings                Standing[]
  substitutions            Substitution[]
  team_coach_history       TeamCoachHistory[]
  team_current_head_coach  team_current_head_coach[]
  team_season_names        TeamSeasonName[]
  team_season_stats        TeamSeasonStats[]
  team_seasons             TeamSeason[]

  @@index([team_name], map: "idx_teams_name")
  @@map("teams")
}

model User {
  user_id              String               @id @db.VarChar(255)
  korean_nickname      String               @unique @db.VarChar(50)
  display_name         String?              @db.VarChar(100)
  profile_image_url    String?
  bio                  String?
  is_active            Boolean?             @default(true)
  created_at           DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?            @default(now()) @db.Timestamptz(6)
  is_admin             Boolean?
  comment_likes        CommentLike[]
  created_events       CommunityEvent[]     @relation("EventCreator")
  community_posts      CommunityPost[]
  event_participations EventParticipation[]
  match_predictions    MatchPrediction[]
  match_supports       MatchSupport[]
  mvp_votes            MvpVote[]
  post_comments        PostComment[]
  post_likes           PostLike[]
  post_view_records    PostViewRecord[]
  user_badges          UserBadge[]
  user_notifications   UserNotification[]
  user_points          UserPoint[]
  player_ability_ratings PlayerAbilityRating[]
  rating_reviews       RatingReview[]
  fantasy_teams        FantasyTeam[]
  fantasy_rankings     FantasyRanking[]

  @@index([korean_nickname], map: "idx_users_korean_nickname")
  @@index([is_active], map: "idx_users_is_active")
  @@index([created_at], map: "idx_users_created_at")
  @@map("users")
}

model Player {
  player_id                           Int                     @id @default(autoincrement())
  name                                String                  @unique @db.VarChar(100)
  birth_date                          DateTime?               @db.Date
  nationality                         String?                 @db.VarChar(50)
  height_cm                           Int?
  profile_image_url                   String?
  created_at                          DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime?               @default(now()) @db.Timestamptz(6)
  jersey_number                       Int?
  assists                             Assist[]
  goals                               Goal[]
  predicted_mvp                       MatchPrediction[]
  mvp_votes                           MvpVote[]
  penalty_shootout_details_goalkeeper PenaltyShootoutDetail[] @relation("Goalkeeper")
  penalty_shootout_details_kicker     PenaltyShootoutDetail[] @relation("Kicker")
  player_match_stats                  PlayerMatchStats[]
  playerPosition                      PlayerPosition[]
  player_season_stats                 PlayerSeasonStats[]
  player_team_history                 PlayerTeamHistory[]
  substitutions_in                    Substitution[]          @relation("PlayerIn")
  substitutions_out                   Substitution[]          @relation("PlayerOut")
  player_ability_ratings              PlayerAbilityRating[]
  player_ability_aggregates           PlayerAbilityAggregate[]
  fantasy_player_selections           FantasyPlayerSelection[]
  fantasy_match_performances          FantasyMatchPerformance[]
  fantasy_ai_recommendations          FantasyAIRecommendation[]

  @@index([jersey_number], map: "idx_players_jersey_number")
  @@index([name], map: "idx_players_name")
  @@map("players")
}

model Season {
  season_id              Int                   @id @default(autoincrement())
  season_name            String                @unique @db.VarChar(100)
  year                   Int
  start_date             DateTime?             @db.Date
  end_date               DateTime?             @db.Date
  created_at             DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?             @default(now()) @db.Timestamptz(6)
  category               SeasonCategory        @default(OTHER)
  community_posts        CommunityPost[]
  group_league_standings GroupLeagueStanding[]
  matches                Match[]
  mvp_votes              MvpVote[]
  playerPosition         PlayerPosition[]
  player_season_stats    PlayerSeasonStats[]
  player_team_history    PlayerTeamHistory[]
  standings              Standing[]
  team_coach_history     TeamCoachHistory[]
  team_season_names      TeamSeasonName[]
  team_season_stats      TeamSeasonStats[]
  team_seasons           TeamSeason[]
  player_ability_ratings PlayerAbilityRating[]
  player_ability_aggregates PlayerAbilityAggregate[]
  fantasy_seasons        FantasySeason[]

  @@index([year], map: "idx_seasons_year")
  @@index([category])
  @@map("seasons")
}

model TeamSeason {
  team_season_id Int       @id @default(autoincrement())
  team_id        Int?
  season_id      Int?
  is_active      Boolean?  @default(true)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  season         Season?   @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction)
  team           Team?     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([team_id, season_id])
  @@map("team_seasons")
}

model PlayerTeamHistory {
  history_id Int       @id @default(autoincrement())
  player_id  Int?
  team_id    Int?
  season_id  Int?
  start_date DateTime? @db.Date
  end_date   DateTime? @db.Date
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  player     Player?   @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  season     Season?   @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction)
  team       Team?     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([player_id, season_id], map: "unique_player_season")
  @@index([season_id], map: "idx_player_team_history_season")
  @@map("player_team_history")
}

model Match {
  match_id                 Int                     @id @default(autoincrement())
  season_id                Int?
  home_team_id             Int?
  away_team_id             Int?
  match_date               DateTime                @db.Timestamptz(6)
  location                 String?                 @db.VarChar(200)
  home_score               Int?
  away_score               Int?
  status                   String?                 @default("scheduled") @db.VarChar(50)
  description              String?
  created_at               DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?               @default(now()) @db.Timestamptz(6)
  penalty_home_score       Int?
  penalty_away_score       Int?
  group_stage              String?                 @db.VarChar(10)
  tournament_stage         String?                 @db.VarChar(50)
  highlight_url            String?                 @db.VarChar(1000)
  full_video_url           String?                 @db.VarChar(1000)
  home_coach_id            Int?
  away_coach_id            Int?
  assists                  Assist[]
  community_posts          CommunityPost[]
  goals                    Goal[]
  match_coaches            MatchCoach[]
  match_predictions        MatchPrediction[]
  match_supports           MatchSupport[]
  away_coach               Coach?                  @relation("AwayCoach", fields: [away_coach_id], references: [coach_id], onUpdate: NoAction)
  away_team                Team?                   @relation("AwayTeam", fields: [away_team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)
  home_coach               Coach?                  @relation("HomeCoach", fields: [home_coach_id], references: [coach_id], onUpdate: NoAction)
  home_team                Team?                   @relation("HomeTeam", fields: [home_team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)
  season                   Season?                 @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction)
  mvp_votes                MvpVote[]
  penalty_shootout_details PenaltyShootoutDetail[]
  player_match_stats       PlayerMatchStats[]
  substitutions            Substitution[]
  fantasy_match_performances FantasyMatchPerformance[]

  @@index([away_coach_id], map: "idx_matches_away_coach")
  @@index([match_date], map: "idx_matches_date")
  @@index([home_coach_id], map: "idx_matches_home_coach")
  @@index([season_id], map: "idx_matches_season")
  @@map("matches")
}

model PlayerMatchStats {
  stat_id        Int       @id @default(autoincrement())
  match_id       Int?
  player_id      Int?
  team_id        Int?
  goals          Int?      @default(0)
  assists        Int?      @default(0)
  yellow_cards   Int?      @default(0)
  red_cards      Int?      @default(0)
  minutes_played Int?      @default(0)
  saves          Int?      @default(0)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  position       String?   @db.VarChar(50)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  card_type      String?   @default("none") @db.VarChar(20)
  goals_conceded Int?      @default(0)
  goal_records   Goal[]    @relation("GoalsByPlayerMatch")
  match          Match?    @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction)
  player         Player?   @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  team           Team?     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([player_id, match_id], map: "uq_player_match_stats_player_match")
  @@index([match_id], map: "idx_player_match_stats_match")
  @@index([position], map: "idx_player_match_stats_position")
  @@index([match_id], map: "idx_player_stats_match")
  @@index([player_id], map: "idx_player_stats_player")
  @@map("player_match_stats")
}

model Goal {
  goal_id                          Int              @id @default(autoincrement())
  match_id                         Int
  player_id                        Int
  goal_time                        Int?
  goal_type                        String?          @default("regular") @db.VarChar(50)
  description                      String?
  created_at                       DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime?        @default(now()) @db.Timestamptz(6)
  assist_id                        Int?
  assists                          Assist[]
  assists_goals_assist_idToassists Assist?          @relation("goals_assist_idToassists", fields: [assist_id], references: [assist_id], onUpdate: NoAction, map: "fk_goals_assist")
  player_match_stats               PlayerMatchStats @relation("GoalsByPlayerMatch", fields: [player_id, match_id], references: [player_id, match_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_goals_player_match_stats")
  match                            Match            @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction)
  player                           Player           @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assist_id], map: "idx_goals_assist_id")
  @@index([match_id], map: "idx_goals_match_id")
  @@index([match_id, player_id], map: "idx_goals_match_player")
  @@index([player_id], map: "idx_goals_player_id")
  @@map("goals")
}

model Assist {
  assist_id                      Int       @id @default(autoincrement())
  match_id                       Int
  player_id                      Int
  goal_id                        Int
  assist_time                    Int?
  assist_type                    String?   @default("regular") @db.VarChar(50)
  description                    String?
  created_at                     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime? @default(now()) @db.Timestamptz(6)
  goal                           Goal      @relation(fields: [goal_id], references: [goal_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_assists_goal")
  match                          Match     @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_assists_match")
  player                         Player    @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_assists_player")
  goals_goals_assist_idToassists Goal[]    @relation("goals_assist_idToassists")

  @@index([goal_id], map: "idx_assists_goal_id")
  @@index([match_id], map: "idx_assists_match_id")
  @@index([match_id, player_id], map: "idx_assists_match_player")
  @@index([player_id], map: "idx_assists_player_id")
  @@map("assists")
}

model Substitution {
  substitution_id     Int       @id @default(autoincrement())
  match_id            Int
  player_in_id        Int
  team_id             Int
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)
  player_out_id       Int?
  substitution_time   Int?
  substitution_reason String?
  match               Match     @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  player_in           Player    @relation("PlayerIn", fields: [player_in_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  player_out          Player?   @relation("PlayerOut", fields: [player_out_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  team                Team      @relation(fields: [team_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([match_id], map: "idx_substitutions_match_id")
  @@index([player_in_id], map: "idx_substitutions_player_in_id")
  @@index([team_id], map: "idx_substitutions_team_id")
  @@map("substitutions")
}

model PenaltyShootoutDetail {
  penalty_detail_id Int       @id @default(autoincrement())
  match_id          Int
  team_id           Int
  goalkeeper_id     Int?
  kicker_order      Int
  kicker_id         Int
  is_successful     Boolean
  kick_description  String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  goalkeeper        Player?   @relation("Goalkeeper", fields: [goalkeeper_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  kicker            Player    @relation("Kicker", fields: [kicker_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  match             Match     @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction)
  team              Team      @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([match_id, team_id, kicker_order])
  @@index([kicker_id], map: "idx_penalty_details_kicker")
  @@index([match_id], map: "idx_penalty_details_match")
  @@index([team_id], map: "idx_penalty_details_team")
  @@map("penalty_shootout_details")
}

model PlayerSeasonStats {
  stat_id        Int       @id @default(autoincrement())
  player_id      Int?
  season_id      Int?
  team_id        Int?
  matches_played Int?      @default(0)
  goals          Int?      @default(0)
  assists        Int?      @default(0)
  yellow_cards   Int?      @default(0)
  red_cards      Int?      @default(0)
  minutes_played Int?      @default(0)
  saves          Int?      @default(0)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  player         Player?   @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  season         Season?   @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction)
  team           Team?     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([player_id, season_id, team_id])
  @@map("player_season_stats")
}

model TeamSeasonStats {
  stat_id        Int       @id @default(autoincrement())
  team_id        Int?
  season_id      Int?
  matches_played Int?      @default(0)
  wins           Int?      @default(0)
  draws          Int?      @default(0)
  losses         Int?      @default(0)
  goals_for      Int?      @default(0)
  goals_against  Int?      @default(0)
  points         Int?      @default(0)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  season         Season?   @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction)
  team           Team?     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([team_id, season_id])
  @@map("team_season_stats")
}

model Standing {
  standing_id     Int       @id @default(autoincrement())
  season_id       Int?
  team_id         Int?
  position        Int
  matches_played  Int?      @default(0)
  wins            Int?      @default(0)
  draws           Int?      @default(0)
  losses          Int?      @default(0)
  goals_for       Int?      @default(0)
  goals_against   Int?      @default(0)
  goal_difference Int?      @default(0)
  points          Int?      @default(0)
  form            String?   @db.VarChar(10)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  season          Season?   @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction)
  team            Team?     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([season_id, team_id])
  @@index([position], map: "idx_standings_position")
  @@index([season_id], map: "idx_standings_season")
  @@map("standings")
}

model PlayerPosition {
  player_position_id Int       @id @default(autoincrement())
  player_id          Int
  position           String    @db.VarChar(50)
  season_id          Int?
  start_date         DateTime  @db.Date
  end_date           DateTime? @db.Date
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  player             Player    @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  season             Season?   @relation(fields: [season_id], references: [season_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([player_id, position, season_id, start_date], map: "unique_player_position_period")
  @@map("player_positions")
}

model TeamSeasonName {
  id         Int       @id @default(autoincrement())
  team_id    Int
  season_id  Int
  team_name  String    @db.VarChar(255)
  is_current Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  season     Season    @relation(fields: [season_id], references: [season_id], onDelete: Cascade)
  team       Team      @relation(fields: [team_id], references: [team_id], onDelete: Cascade)

  @@unique([team_id, season_id])
  @@map("team_season_names")
}

model GroupLeagueStanding {
  group_standing_id Int       @id @default(autoincrement())
  season_id         Int
  group_stage       String    @db.VarChar(1)
  group_name        String?   @db.VarChar(50)
  team_id           Int
  position          Int
  matches_played    Int?      @default(0)
  wins              Int?      @default(0)
  draws             Int?      @default(0)
  losses            Int?      @default(0)
  goals_for         Int?      @default(0)
  goals_against     Int?      @default(0)
  goal_difference   Int?      @default(0)
  points            Int?      @default(0)
  form              String?   @db.VarChar(10)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  tournament_stage  String?   @default("group_league") @db.VarChar(20)
  season            Season    @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_standings_season")
  team              Team      @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_standings_team")

  @@unique([season_id, group_stage, team_id], map: "unique_season_group_team")
  @@index([season_id, group_stage, position], map: "idx_group_standings_position")
  @@index([season_id, group_stage], map: "idx_group_standings_season_group")
  @@index([team_id], map: "idx_group_standings_team")
  @@map("group_league_standings")
}

model Coach {
  coach_id                Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar
  birth_date              DateTime?                 @db.Date
  nationality             String?                   @db.VarChar
  profile_image_url       String?
  created_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  match_coaches           MatchCoach[]
  away_matches            Match[]                   @relation("AwayCoach")
  home_matches            Match[]                   @relation("HomeCoach")
  team_coach_history      TeamCoachHistory[]
  team_current_head_coach team_current_head_coach[]

  @@index([name], map: "idx_coaches_name")
  @@map("coaches")
}

model TeamCoachHistory {
  id         Int       @id @default(autoincrement())
  coach_id   Int
  team_id    Int
  season_id  Int
  start_date DateTime  @db.Date
  end_date   DateTime? @db.Date
  role       String    @default("head") @db.VarChar
  is_current Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  coach      Coach     @relation(fields: [coach_id], references: [coach_id], onDelete: Cascade, onUpdate: NoAction)
  season     Season    @relation(fields: [season_id], references: [season_id], onDelete: Cascade, onUpdate: NoAction)
  team       Team      @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([coach_id, team_id, season_id, role, start_date])
  @@index([coach_id], map: "idx_team_coach_history_coach_id")
  @@index([start_date, end_date], map: "idx_team_coach_history_dates")
  @@index([is_current], map: "idx_team_coach_history_is_current")
  @@index([season_id], map: "idx_team_coach_history_season_id")
  @@index([team_id], map: "idx_team_coach_history_team_id")
  @@map("team_coach_history")
}

model MatchCoach {
  id         Int       @id @default(autoincrement())
  match_id   Int
  team_id    Int
  coach_id   Int
  role       String    @default("head") @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  coach      Coach     @relation(fields: [coach_id], references: [coach_id], onDelete: Cascade, onUpdate: NoAction)
  match      Match     @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction)
  team       Team      @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([match_id, team_id, role])
  @@unique([match_id, team_id, role], map: "uniq_match_coaches_match_team_role")
  @@index([coach_id], map: "idx_match_coaches_coach_id")
  @@index([match_id], map: "idx_match_coaches_match_id")
  @@index([role], map: "idx_match_coaches_role")
  @@index([team_id], map: "idx_match_coaches_team_id")
  @@map("match_coaches")
}

model team_current_head_coach {
  coach_id          Int
  team_id           Int
  team_name         String   @db.VarChar(255)
  logo              String?  @db.VarChar(1000)
  profile_image_url String?  @db.VarChar(1000)
  last_match_date   DateTime @db.Timestamptz(6)
  coaches           Coach    @relation(fields: [coach_id], references: [coach_id], onDelete: Cascade, onUpdate: NoAction)
  teams             Team     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([coach_id, team_id], map: "team_current_head_coach_pk")
}

model H2hPairStats {
  team_small_id Int
  team_large_id Int
  total_matches Int      @default(0)
  small_wins    Int      @default(0)
  draws         Int      @default(0)
  large_wins    Int      @default(0)
  small_goals   Int      @default(0)
  large_goals   Int      @default(0)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)

  @@id([team_small_id, team_large_id])
  @@index([team_small_id, team_large_id], map: "h2h_pair_stats_small_large")
  @@map("h2h_pair_stats")
}

model MatchSupport {
  support_id   Int      @id @default(autoincrement())
  user_id      String   @db.VarChar(255)
  match_id     Int
  team_id      Int
  support_type String   @default("cheer") @db.VarChar(20)
  message      String?
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
  match        Match    @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_supports_match_id")
  team         Team     @relation(fields: [team_id], references: [team_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_supports_team_id")
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_supports_user_id")

  @@unique([user_id, match_id], map: "unique_user_match_support")
  @@index([match_id], map: "idx_match_supports_match_id")
  @@index([team_id], map: "idx_match_supports_team_id")
  @@index([user_id], map: "idx_match_supports_user_id")
  @@index([created_at], map: "idx_match_supports_created_at")
  @@map("match_supports")
}

model CommunityPost {
  post_id        Int              @id @default(autoincrement())
  user_id        String           @db.VarChar(255)
  title          String           @db.VarChar(200)
  content        String?
  category       String           @default("general") @db.VarChar(50)
  team_id        Int?
  match_id       Int?
  season_id      Int?
  is_pinned      Boolean          @default(false)
  likes_count    Int              @default(0)
  comments_count Int              @default(0)
  views_count    Int              @default(0)
  is_deleted     Boolean          @default(false)
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  match          Match?           @relation(fields: [match_id], references: [match_id])
  season         Season?          @relation(fields: [season_id], references: [season_id])
  team           Team?            @relation(fields: [team_id], references: [team_id])
  user           User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  comments       PostComment[]
  likes          PostLike[]
  viewRecords    PostViewRecord[]

  @@index([category], map: "idx_community_posts_category")
  @@index([team_id], map: "idx_community_posts_team_id")
  @@index([created_at], map: "idx_community_posts_created_at")
  @@index([user_id], map: "idx_community_posts_user_id")
  @@map("community_posts")
}

model PostViewRecord {
  record_id  Int           @id @default(autoincrement())
  post_id    Int
  user_id    String?       @db.VarChar(255)
  session_id String        @db.VarChar(255)
  ip_address String?       @db.VarChar(45)
  user_agent String?
  viewed_at  DateTime      @default(now()) @db.Timestamptz(6)
  post       CommunityPost @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  user       User?         @relation(fields: [user_id], references: [user_id])

  @@unique([post_id, session_id])
  @@unique([post_id, user_id])
  @@index([post_id], map: "idx_post_view_records_post_id")
  @@index([user_id], map: "idx_post_view_records_user_id")
  @@index([session_id], map: "idx_post_view_records_session_id")
  @@index([viewed_at], map: "idx_post_view_records_viewed_at")
  @@map("post_view_records")
}

model PostComment {
  comment_id        Int           @id @default(autoincrement())
  post_id           Int
  user_id           String        @db.VarChar(255)
  parent_comment_id Int?
  content           String
  likes_count       Int           @default(0)
  is_deleted        Boolean       @default(false)
  created_at        DateTime      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime      @default(now()) @db.Timestamptz(6)
  likes             CommentLike[]
  parent_comment    PostComment?  @relation("CommentReplies", fields: [parent_comment_id], references: [comment_id], onDelete: Cascade)
  replies           PostComment[] @relation("CommentReplies")
  post              CommunityPost @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  user              User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([post_id], map: "idx_post_comments_post_id")
  @@index([user_id], map: "idx_post_comments_user_id")
  @@index([created_at], map: "idx_post_comments_created_at")
  @@map("post_comments")
}

model PostLike {
  like_id    Int           @id @default(autoincrement())
  post_id    Int
  user_id    String        @db.VarChar(255)
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  post       CommunityPost @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  user       User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@index([post_id], map: "idx_post_likes_post_id")
  @@index([user_id], map: "idx_post_likes_user_id")
  @@map("post_likes")
}

model CommentLike {
  like_id    Int         @id @default(autoincrement())
  comment_id Int
  user_id    String      @db.VarChar(255)
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  comment    PostComment @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)
  user       User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([comment_id, user_id])
  @@map("comment_likes")
}

model MvpVote {
  vote_id    Int      @id @default(autoincrement())
  season_id  Int
  user_id    String   @db.VarChar(255)
  player_id  Int
  vote_type  String   @default("season") @db.VarChar(20)
  match_id   Int?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  match      Match?   @relation(fields: [match_id], references: [match_id], onDelete: Cascade)
  player     Player   @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  season     Season   @relation(fields: [season_id], references: [season_id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([season_id, user_id, vote_type, match_id])
  @@index([season_id], map: "idx_mvp_votes_season_id")
  @@index([player_id], map: "idx_mvp_votes_player_id")
  @@map("mvp_votes")
}

model MatchPrediction {
  prediction_id    Int      @id @default(autoincrement())
  match_id         Int
  user_id          String   @db.VarChar(255)
  home_score       Int
  away_score       Int
  predicted_winner String?  @db.VarChar(20)
  predicted_mvp_id Int?
  confidence_level Int      @default(50)
  is_correct       Boolean?
  points_earned    Int      @default(0)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  match            Match    @relation(fields: [match_id], references: [match_id], onDelete: Cascade)
  predicted_mvp    Player?  @relation(fields: [predicted_mvp_id], references: [player_id])
  user             User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([match_id, user_id])
  @@index([match_id], map: "idx_match_predictions_match_id")
  @@index([user_id], map: "idx_match_predictions_user_id")
  @@map("match_predictions")
}

model UserPoint {
  point_id      Int      @id @default(autoincrement())
  user_id       String   @db.VarChar(255)
  points_change Int
  point_type    String   @db.VarChar(50)
  reference_id  Int?
  description   String?  @db.VarChar(200)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  user          User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id], map: "idx_user_points_user_id")
  @@index([created_at], map: "idx_user_points_created_at")
  @@map("user_points")
}

model UserBadge {
  badge_id          Int      @id @default(autoincrement())
  user_id           String   @db.VarChar(255)
  badge_type        String   @db.VarChar(50)
  badge_name        String   @db.VarChar(100)
  badge_description String?
  badge_icon        String?  @db.VarChar(100)
  earned_at         DateTime @default(now()) @db.Timestamptz(6)
  user              User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, badge_type])
  @@index([user_id], map: "idx_user_badges_user_id")
  @@map("user_badges")
}

model CommunityEvent {
  event_id             Int                  @id @default(autoincrement())
  title                String               @db.VarChar(200)
  description          String?
  event_type           String               @db.VarChar(50)
  start_date           DateTime             @db.Timestamptz(6)
  end_date             DateTime             @db.Timestamptz(6)
  reward_points        Int                  @default(0)
  max_participants     Int?
  current_participants Int                  @default(0)
  is_active            Boolean              @default(true)
  created_by           String?              @db.VarChar(255)
  created_at           DateTime             @default(now()) @db.Timestamptz(6)
  creator              User?                @relation("EventCreator", fields: [created_by], references: [user_id])
  participations       EventParticipation[]

  @@map("community_events")
}

model EventParticipation {
  participation_id Int            @id @default(autoincrement())
  event_id         Int
  user_id          String         @db.VarChar(255)
  answer_data      Json?
  score            Int            @default(0)
  is_winner        Boolean        @default(false)
  participated_at  DateTime       @default(now()) @db.Timestamptz(6)
  event            CommunityEvent @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user             User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([event_id, user_id])
  @@map("event_participations")
}

model UserNotification {
  notification_id   Int      @id @default(autoincrement())
  user_id           String   @db.VarChar(255)
  notification_type String   @db.VarChar(50)
  title             String   @db.VarChar(200)
  message           String?
  reference_type    String?  @db.VarChar(50)
  reference_id      Int?
  is_read           Boolean  @default(false)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  user              User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id], map: "idx_user_notifications_user_id")
  @@index([is_read], map: "idx_user_notifications_is_read")
  @@map("user_notifications")
}

enum SeasonCategory {
  G_LEAGUE
  SUPER_LEAGUE
  CHALLENGE_LEAGUE
  PLAYOFF
  OTHER
  SBS_CUP
  CHAMPION_MATCH
  GIFA_CUP

  @@map("season_category")
}

model PlayerAbilityRating {
  rating_id      Int      @id @default(autoincrement())
  player_id      Int
  user_id        String   @db.VarChar(255)
  season_id      Int?
  
  // 공격 능력치 (1-99)
  finishing      Int?     @default(50)
  shot_power     Int?     @default(50)
  shot_accuracy  Int?     @default(50)
  heading        Int?     @default(50)
  
  // 패스 & 플레이메이킹
  short_passing  Int?     @default(50)
  long_passing   Int?     @default(50)
  vision         Int?     @default(50)
  crossing       Int?     @default(50)
  
  // 드리블 & 기술
  dribbling      Int?     @default(50)
  ball_control   Int?     @default(50)
  agility        Int?     @default(50)
  balance        Int?     @default(50)
  
  // 수비 능력
  marking        Int?     @default(50)
  tackling       Int?     @default(50)
  interceptions  Int?     @default(50)
  defensive_heading Int?  @default(50)
  
  // 피지컬
  speed          Int?     @default(50)
  acceleration   Int?     @default(50)
  stamina        Int?     @default(50)
  strength       Int?     @default(50)
  
  // 멘탈
  determination  Int?     @default(50)
  work_rate      Int?     @default(50)
  leadership     Int?     @default(50)
  composure      Int?     @default(50)
  
  // 골키퍼 전용
  reflexes       Int?     @default(50)
  diving         Int?     @default(50)
  handling       Int?     @default(50)
  kicking        Int?     @default(50)
  
  overall_rating Int?     @default(50)
  comment        String?
  
  helpful_count  Int      @default(0)
  total_reviews  Int      @default(0)
  
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  
  player         Player   @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  season         Season?  @relation(fields: [season_id], references: [season_id])
  reviews        RatingReview[]
  
  @@unique([player_id, user_id, season_id])
  @@index([player_id])
  @@index([user_id])
  @@index([season_id])
  @@index([overall_rating])
  @@index([created_at])
  @@map("player_ability_ratings")
}

model RatingReview {
  review_id   Int      @id @default(autoincrement())
  rating_id   Int
  user_id     String   @db.VarChar(255)
  review_type String   @db.VarChar(20) // 'helpful', 'not_helpful', 'comment'
  comment     String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  
  rating      PlayerAbilityRating @relation(fields: [rating_id], references: [rating_id], onDelete: Cascade)
  user        User                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@unique([rating_id, user_id, review_type])
  @@index([rating_id])
  @@index([user_id])
  @@index([review_type])
  @@map("rating_reviews")
}

model PlayerAbilityAggregate {
  player_id     Int      @id
  season_id     Int?
  
  // 평균 능력치들
  avg_finishing      Float? @default(50)
  avg_shot_power     Float? @default(50)
  avg_shot_accuracy  Float? @default(50)
  avg_heading        Float? @default(50)
  avg_short_passing  Float? @default(50)
  avg_long_passing   Float? @default(50)
  avg_vision         Float? @default(50)
  avg_crossing       Float? @default(50)
  avg_dribbling      Float? @default(50)
  avg_ball_control   Float? @default(50)
  avg_agility        Float? @default(50)
  avg_balance        Float? @default(50)
  avg_marking        Float? @default(50)
  avg_tackling       Float? @default(50)
  avg_interceptions  Float? @default(50)
  avg_defensive_heading Float? @default(50)
  avg_speed          Float? @default(50)
  avg_acceleration   Float? @default(50)
  avg_stamina        Float? @default(50)
  avg_strength       Float? @default(50)
  avg_determination  Float? @default(50)
  avg_work_rate      Float? @default(50)
  avg_leadership     Float? @default(50)
  avg_composure      Float? @default(50)
  avg_reflexes       Float? @default(50)
  avg_diving         Float? @default(50)
  avg_handling       Float? @default(50)
  avg_kicking        Float? @default(50)
  avg_overall_rating Float? @default(50)
  
  total_ratings      Int      @default(0)
  last_updated       DateTime @default(now()) @db.Timestamptz(6)
  
  player             Player   @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  season             Season?  @relation(fields: [season_id], references: [season_id])
  
  @@unique([player_id, season_id])
  @@index([avg_overall_rating])
  @@map("player_ability_aggregates")
}

// Fantasy Football Models
model FantasySeason {
  fantasy_season_id Int      @id @default(autoincrement())
  season_id         Int
  year              Int
  month             Int      // 1-12
  start_date        DateTime @db.Timestamptz(6) // 편성 시작일 (매월 1주차 월요일)
  end_date          DateTime @db.Timestamptz(6) // 편성 마감일 (매월 1주차 일요일)
  lock_date         DateTime @db.Timestamptz(6) // 변경 불가 시작일 (매월 2주차 월요일)
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)
  
  season            Season   @relation(fields: [season_id], references: [season_id], onDelete: Cascade)
  fantasy_teams     FantasyTeam[]
  fantasy_rankings  FantasyRanking[]
  fantasy_ai_recommendations FantasyAIRecommendation[]
  
  @@unique([season_id, year, month])
  @@index([year, month])
  @@index([is_active])
  @@map("fantasy_seasons")
}

model FantasyTeam {
  fantasy_team_id   Int      @id @default(autoincrement())
  user_id           String   @db.VarChar(255)
  fantasy_season_id Int
  team_name         String?  @db.VarChar(100)
  total_points      Int      @default(0)
  is_locked         Boolean  @default(false)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)
  
  user              User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  fantasy_season    FantasySeason  @relation(fields: [fantasy_season_id], references: [fantasy_season_id], onDelete: Cascade)
  player_selections FantasyPlayerSelection[]
  
  @@unique([user_id, fantasy_season_id])
  @@index([fantasy_season_id])
  @@index([total_points])
  @@map("fantasy_teams")
}

model FantasyPlayerSelection {
  selection_id      Int      @id @default(autoincrement())
  fantasy_team_id   Int
  player_id         Int
  selection_order   Int      // 1-5
  position          String?  @db.VarChar(2)  // GK, DF, MF, FW
  points_earned     Int      @default(0)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)
  
  fantasy_team      FantasyTeam @relation(fields: [fantasy_team_id], references: [fantasy_team_id], onDelete: Cascade)
  player            Player      @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  match_performances FantasyMatchPerformance[]
  
  @@unique([fantasy_team_id, player_id])
  @@unique([fantasy_team_id, selection_order])
  @@index([fantasy_team_id])
  @@index([player_id])
  @@map("fantasy_player_selections")
}

model FantasyMatchPerformance {
  performance_id    Int      @id @default(autoincrement())
  selection_id      Int
  match_id          Int
  player_id         Int
  
  // 점수 세부사항
  appearance_points Int      @default(0)
  goal_points       Int      @default(0)
  assist_points     Int      @default(0)
  clean_sheet_points Int     @default(0)
  save_points       Int      @default(0)
  defensive_points  Int      @default(0)
  penalty_points    Int      @default(0)
  card_points       Int      @default(0)
  bonus_points      Int      @default(0)
  
  total_points      Int      @default(0)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  
  selection         FantasyPlayerSelection @relation(fields: [selection_id], references: [selection_id], onDelete: Cascade)
  match             Match                  @relation(fields: [match_id], references: [match_id], onDelete: Cascade)
  player            Player                 @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  
  @@unique([selection_id, match_id])
  @@index([match_id])
  @@index([player_id])
  @@map("fantasy_match_performances")
}

model FantasyRanking {
  ranking_id        Int      @id @default(autoincrement())
  fantasy_season_id Int
  user_id           String   @db.VarChar(255)
  fantasy_team_id   Int
  rank_position     Int
  total_points      Int
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  
  fantasy_season    FantasySeason @relation(fields: [fantasy_season_id], references: [fantasy_season_id], onDelete: Cascade)
  user              User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@unique([fantasy_season_id, user_id])
  @@index([fantasy_season_id, rank_position])
  @@index([fantasy_season_id, total_points])
  @@map("fantasy_rankings")
}

model FantasyAIRecommendation {
  recommendation_id Int      @id @default(autoincrement())
  fantasy_season_id Int
  player_id         Int
  recommendation_score Float
  reason            String?
  form_score        Float?   @default(0)
  fixture_difficulty Float?  @default(0)
  price_value       Float?   @default(0)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  
  fantasy_season    FantasySeason @relation(fields: [fantasy_season_id], references: [fantasy_season_id], onDelete: Cascade)
  player            Player        @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  
  @@unique([fantasy_season_id, player_id])
  @@index([fantasy_season_id, recommendation_score])
  @@map("fantasy_ai_recommendations")
}
